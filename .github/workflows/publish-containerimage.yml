name: Publish / Mastodon container images

on:
  # Run every Monday at 12:00 EDT (16:00 UTC)
  schedule:
    - cron: "0 16 * * MON"
  # Allow manual trigger 
  workflow_dispatch: 
    inputs:
      delete_layer_cache:
        type: boolean
        description: Delete the layer cache generated by previous builds.
        default: false
      do_not_rebuild_os:
        type: boolean
        description: Do not rebuild the OS.
        default: false
      do_not_rebuild_mastodon:
        type: boolean
        description: Do not rebuild Mastodon.
        default: false

permissions:
  actions: write

jobs:
    build:
      runs-on: ubuntu-latest
      strategy:
        matrix: 
          type: [ "glitch-soc" ]

      steps:
        - name: 'Checkout: Latest commit'
          uses: actions/checkout@v3
          with:
            submodules: true

        - name: Get current ticks
          id: get_current_ticks
          shell: pwsh
          run: |
            $currentDateTimeTicks = [System.DateTimeOffset]::Now.UtcTicks
            "current_datetime_ticks=$($currentDateTimeTicks)" >> $env:GITHUB_ENV

        - name: Clear layer cache
          if: ${{ inputs.delete_layer_cache == true }}
          shell: pwsh
          env:
            GH_TOKEN: ${{ github.token }}
          run: |
            gh extension install actions/gh-actions-cache

            $cacheList = gh actions-cache list --branch "main"
            $cacheKeys = ($cacheList | Select-String -Pattern "^(?'cacheKey'.+?)\t.+$").Matches | ForEach-Object { $PSItem.Groups["cacheKey"].Value }
            $cacheKeys | ForEach-Object { gh actions-cache delete "$($PSItem)" --confirm }

        - name: Cache OS build seed
          id: cache_os_build_seed
          uses: actions/cache@v3
          with:
            path: ./.os-build-seed
            key: ${{ runner.os }}-os-build-seed

        - name: Cache Mastodon build seed
          id: cache_mastodon_build_seed
          uses: actions/cache@v3
          with:
            path: ./.build-seed
            key: ${{ runner.os }}-build-seed

        - name: Generate OS build seed
          id: generate_os_build_seed
          if: ${{ steps.cache_os_build_seed.outputs.cache-hit != 'true' || github.event_name == 'schedule' || inputs.do_not_rebuild_os == false }}
          shell: pwsh
          run: |
            $buildSeed = (New-Guid).Guid
            $buildSeed > ./.os-build-seed

        - name: Generate Mastodon build seed
          id: generate_build_seed
          if: ${{ steps.cache_mastodon_build_seed.outputs.cache-hit != 'true' || github.event_name == 'schedule' || inputs.do_not_rebuild_os == false || inputs.do_not_rebuild_mastodon == false }}
          shell: pwsh
          run: |
            $buildSeed = (New-Guid).Guid
            $buildSeed > ./.build-seed

        - name: Set build seed environment variables
          shell: pwsh
          run: |
            $mastodonBuildSeed = Get-Content -Path "./.build-seed" -Raw
            "build_seed=$($mastodonBuildSeed)" >> $env:GITHUB_ENV

            $osBuildSeed = Get-Content -Path "./.os-build-seed" -Raw
            "os_build_seed=$($osBuildSeed)" >> $env:GITHUB_ENV

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v2

        - name: Login to container registry
          uses: docker/login-action@v2
          with:
            registry: smallsonlinemstdncontainers.azurecr.io
            username: ${{ secrets.REGISTRY_USERNAME }}
            password: ${{ secrets.REGISTRY_PASSWORD }}

        - name: Build and push container image to registry
          uses: docker/build-push-action@v4
          with:
            push: true
            tags: smallsonlinemstdncontainers.azurecr.io/ocwsocial-${{ matrix.type }}:latest,smallsonlinemstdncontainers.azurecr.io/ocwsocial-${{ matrix.type }}:${{ github.ref_name }}_${{ env.current_datetime_ticks }}
            file: ./Dockerfile.${{ matrix.type }}.build
            context: ./
            build-args: |
              OS_BUILD_SEED=${{ env.os_build_seed }}
              BUILD_SEED=${{ env.build_seed }}
            cache-from: type=gha
            cache-to: type=gha,mode=max
